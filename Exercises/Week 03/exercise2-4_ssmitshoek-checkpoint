{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "98ebad17-2a62-4b75-9c91-70679c239c34",
   "metadata": {},
   "outputs": [],
   "source": [
    "# DSC530-T302\n",
    "# Stephen Smitshoek\n",
    "# Week03\n",
    "# Exercise 2-4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "65745fcb-65d2-4f5b-8170-77712f66998c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "import numpy as np\n",
    "import thinkstats2\n",
    "import math"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4da4b42b-4bb1-4455-bc58-01c2f53a4ce3",
   "metadata": {},
   "outputs": [],
   "source": [
    "def ReadFemPreg(dct_file='2002FemPreg.dct',\n",
    "                dat_file='2002FemPreg.dat.gz'):\n",
    "    \"\"\"Reads the NSFG pregnancy data.\n",
    "\n",
    "    dct_file: string file name\n",
    "    dat_file: string file name\n",
    "\n",
    "    returns: DataFrame\n",
    "    \"\"\"\n",
    "    dct = thinkstats2.ReadStataDct(dct_file)\n",
    "    df = dct.ReadFixedWidth(dat_file, compression='gzip')\n",
    "    CleanFemPreg(df)\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "267af0d2-7a7a-4020-8cae-f23d9f7e396b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def CleanFemPreg(df):\n",
    "    \"\"\"Recodes variables from the pregnancy frame.\n",
    "\n",
    "    df: DataFrame\n",
    "    \"\"\"\n",
    "    # mother's age is encoded in centiyears; convert to years\n",
    "    df.agepreg /= 100.0\n",
    "\n",
    "    # birthwgt_lb contains at least one bogus value (51 lbs)\n",
    "    # replace with NaN\n",
    "    df.loc[df.birthwgt_lb > 20, 'birthwgt_lb'] = np.nan\n",
    "    \n",
    "    # replace 'not ascertained', 'refused', 'don't know' with NaN\n",
    "    na_vals = [97, 98, 99]\n",
    "    df.birthwgt_lb.replace(na_vals, np.nan, inplace=True)\n",
    "    df.birthwgt_oz.replace(na_vals, np.nan, inplace=True)\n",
    "    df.hpagelb.replace(na_vals, np.nan, inplace=True)\n",
    "\n",
    "    df.babysex.replace([7, 9], np.nan, inplace=True)\n",
    "    df.nbrnaliv.replace([9], np.nan, inplace=True)\n",
    "\n",
    "    # birthweight is stored in two columns, lbs and oz.\n",
    "    # convert to a single column in lb\n",
    "    # NOTE: creating a new column requires dictionary syntax,\n",
    "    # not attribute assignment (like df.totalwgt_lb)\n",
    "    df['totalwgt_lb'] = df.birthwgt_lb + df.birthwgt_oz / 16.0    \n",
    "\n",
    "    # due to a bug in ReadStataDct, the last variable gets clipped;\n",
    "    # so for now set it to NaN\n",
    "    df.cmintvw = np.nan"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9b3a086e-fb71-461e-b484-40fac9223217",
   "metadata": {},
   "outputs": [],
   "source": [
    "def data_split(preg_df):\n",
    "    # Find all the live births and split them into first babies and other babies\n",
    "    live = preg_df[preg_df.outcome==1]\n",
    "    first = live[live.birthord == 1]\n",
    "    other = live[live.birthord != 1]\n",
    "    \n",
    "    return first, other"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5e4ad932-e315-47d7-83af-dc23a6eba499",
   "metadata": {},
   "outputs": [],
   "source": [
    "def cohen_effect_size(group1, group2):\n",
    "    diff = group1.mean() - group2.mean()\n",
    "    \n",
    "    var1 = group1.var()\n",
    "    var2 = group2.var()\n",
    "    \n",
    "    n1, n2 = len(group1), len(group2)\n",
    "    \n",
    "    pooled_var = (n1 * var1 + n2 * var2) / (n1 + n2)\n",
    "    \n",
    "    d = diff / math.sqrt(pooled_var)\n",
    "    return d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "309b7d6c-b4c4-414c-8976-3218f7e6ac04",
   "metadata": {},
   "outputs": [],
   "source": [
    "def main():\n",
    "    preg_df = ReadFemPreg()\n",
    "    CleanFemPreg(preg_df)\n",
    "    first, other = data_split(preg_df)\n",
    "    \n",
    "    print('Summary of First Baby Weight vs Other Baby Weight')\n",
    "    print('First Babies Mean: {} lbs'.format(round(first.totalwgt_lb.mean(), 1)))\n",
    "    print('Other Babies Mean: {} lbs'.format(round(other.totalwgt_lb.mean(), 1)))\n",
    "    print('Cohen Effect Size: {}'.format(round(cohen_effect_size(first.totalwgt_lb, other.totalwgt_lb), 2)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a4843d0e-f754-494f-9f9e-e00570603152",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Summary of First Baby Weight vs Other Baby Weight\n",
      "First Babies Mean: 7.2 lbs\n",
      "Other Babies Mean: 7.3 lbs\n",
      "Cohen Effect Size: -0.09\n"
     ]
    }
   ],
   "source": [
    "if __name__ == '__main__':\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c4a13068-4545-4bda-a7e5-a8141f4431a2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "The Cohen effect size for first baby weight vs other babies weight is 0.09. \n",
      "The Cohen effect size for first pregnacy length vs other babies pregnacy length  is 0.03.\n"
     ]
    }
   ],
   "source": [
    "print('\\nThe Cohen effect size for first baby weight vs other babies weight is 0.09.',\n",
    "      '\\nThe Cohen effect size for first pregnacy length vs other babies pregnacy length  is 0.03.')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
